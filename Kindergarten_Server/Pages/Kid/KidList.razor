@page "/kg-kid"
@using Models
@using Business.Repository.IRepository
@inject IKidRepository KidRepository
@inject IJSRuntime JsRuntime
@inject Kindergarten_Server.Service.IService.IFileUpload FileUpload
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = Common.SD.Role_Admin)]

<div class="row mt-4">
    <div class="col-8">
        <h4 class="card-title text-info">Kindergarten Kids</h4>
    </div>
    <div class="col-3 offset-1">
        <NavLink href="kg-kid/create" class="btn btn-info form-control">Add New Kid</NavLink>
    </div>
</div>

@*the kids table*@
<div class="row mt-4">
    <div class="col-12">
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th>Full Name</th>
                    <th>Details</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (Kids.Any())
                {
                    foreach (var kid in Kids)
                    {
                        <tr>
                            <td>@kid.FullName</td>
                            <td>@kid.Details</td>

                            <td width="200px" align="center">
                                <NavLink href="@($"kg-kid/edit/{kid.Id}")"  class="btn btn-primary m-2 btn-sm custom" >Edit</NavLink>
                                <button class="btn btn-danger m-2 btn-sm custom" @onclick="()=>HandleDelete(kid.Id)">Delete</button>
                            </td>

                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5">No records found</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>


<DeleteConfirmation IsParentComponentProcessing="IsProcessing" ConfirmationChanged="ConfirmDelete_Click"></DeleteConfirmation>



@code {
    private IEnumerable<KidDTO> Kids { get; set; } = new List<KidDTO>();
    private int? DeleteKidId { get; set; } = null;
    private bool IsProcessing { get; set; } = false;



    protected override async Task OnInitializedAsync()
    {
        Kids = await KidRepository.GetAllKids();
    }



    private async Task HandleDelete(int kidId)
    {
        DeleteKidId = kidId;
        await JsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");

    }



    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsProcessing = true;
        if (isConfirmed && DeleteKidId != null)
        {
            KidDTO kid = await KidRepository.GetKid(DeleteKidId.Value);
            foreach (var image in kid.KidImages)
            {
                var imageName = image.KidImageUrl.Replace($"KidImages/", "");
                FileUpload.DeleteFile(imageName, "KidImages");
            }

            await KidRepository.DeleteKid(DeleteKidId.Value);
            await JsRuntime.ToastrSuccess("Kid data Deleted successfully");
            Kids = await KidRepository.GetAllKids();
        }
        await JsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        IsProcessing = false;
    } }
