@page "/kg-kid/create"
@page "/kg-kid/edit/{Id:int}"
@using Models
@using Business.Repository.IRepository
@using Kindergarten_Server.Service.IService
@inject IKidRepository KidRepository
@inject IKidImageRepository KidImageRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IFileUpload FileUpload


<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 ml-3">@Title Kid</h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="@KidModel" OnValidSubmit="HandleKidUpsert">
                    <DataAnnotationsValidator />
                    @*<ValidationSummary />*@
                    <div class="form-group">
                        <label>FirstName</label>
                        <InputText @bind-Value="KidModel.FirstName" class="form-control"></InputText>
                        <ValidationMessage For="() => KidModel.FirstName" />
                    </div>
                    <div class="form-group">
                        <label>LastName</label>
                        <InputText @bind-Value="KidModel.LastName" class="form-control"></InputText>
                        <ValidationMessage For="() => KidModel.LastName" />
                    </div>
                    <div class="form-group">
                        <label>Details</label>
                        <InputTextArea @bind-Value="KidModel.Details" class="form-control"></InputTextArea>
                    </div>

                    <div class="form-group">
                        <InputFile OnChange="HandleImageUpload" multiple></InputFile>
                    </div>

                    <div class="form-group">
                        <button class="btn btn-primary">@Title Kid </button>
                        <NavLink href="kg-kid" class="btn btn-secondary">Back to Index</NavLink>
                    </div>

                </EditForm>



            </div>
        </div>
    </div>
</div>


@code {

    [Parameter]
    public int? Id { get; set; }

    private KidDTO KidModel { get; set; } = new KidDTO();
    private string Title { get; set; } = "Create";

    private KidImageDTO RoomImage { get; set; } = new KidImageDTO();
    private List<string> DeletedImageNames { get; set; } = new List<string>();
    //public BlazoredTextEditor QuillHtml { get; set; } = new BlazoredTextEditor();
    private bool IsImageUploadProcessStarted { get; set; } = false;


    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            // updating
            Title = "Update";
            KidModel = await KidRepository.GetKid(Id.Value);
            if (true)
            {

            }
        }
        else
        {
            // create
            KidModel = new KidDTO();
        }
    }



    private async Task HandleKidUpsert()
    {
        try
        {
            var kidDetailsByName = await KidRepository.IsKidUnique(KidModel.FullName, KidModel.Id);
            if (kidDetailsByName != null)
            {
                // the kid allready exist > show error
                await JsRuntime.ToastrError("This Kid name already exists.");
                return;
            }

            if (KidModel.Id != 0 && Title == "Update")
            {
                // update
                var updateKudResult = await KidRepository.UpdateKid(KidModel.Id, KidModel);
                await JsRuntime.ToastrSuccess("Kid data updated successfully");

            }
            else
            {
                // create

                var createdResult = await KidRepository.CreateKid(KidModel);
                await JsRuntime.ToastrSuccess("Kid record created successfully");
            }
        }
        catch (Exception ex)
        {
            // log exceptions
        }




        NavigationManager.NavigateTo("kg-kid");
    }


    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        IsImageUploadProcessStarted = true;
        try
        {
            var images = new List<string>();
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" ||
                        fileInfo.Extension.ToLower() == ".png" ||
                        fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        var uploadedImagePath = await FileUpload.UploadFile(file);
                        images.Add(uploadedImagePath);
                    }
                    else
                    {
                        await JsRuntime.ToastrError("Please select .jpg/.jpeg/.png file only");
                        return;
                    }
                }

                if (images.Any())
                {
                    if (KidModel.ImageUrls != null && KidModel.ImageUrls.Any())
                    {
                        KidModel.ImageUrls.AddRange(images);
                    }
                    else
                    {
                        KidModel.ImageUrls = new List<string>();
                        KidModel.ImageUrls.AddRange(images);
                    }
                }
                else
                {
                    await JsRuntime.ToastrError("Image uploading failed");
                    return;
                }
            }
            IsImageUploadProcessStarted = false;
        }
        catch (Exception ex)
        {
            await JsRuntime.ToastrError(ex.Message);
        }



    }


}
